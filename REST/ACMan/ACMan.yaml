#%RAML 0.8
---
title: "AC Man"
version: v1
baseUri: http://cp/om/fo/{version}/acman/live
documentation: 
  - title: Overview
    content: |
          TBD
traits: 
  - !include ACManTraits.yaml
mediaType: application/json
schemas:
  - acs-request: !include ../../schemas/ACMan/acsRequest.json
  - acs-response: !include ../../schemas/ACMan/acsResponse.json
  - acs-update: !include ../../schemas/ACMan/acsUpdate.json
/proxy-ping:
    description: This request is used to check AC Man server status whether it is up and responding. 
/acs:
  get:
    description: |
      *  READ
         * This returns the list of AC packages corresponding to the specified criteria.
      * Options
         * For a UI or Reporting utility
           QueryParameters:
           ids={ids}[&limit=<limit>&offset=<offset>][&sort=<sort>]
           e.g. GET /cp/om/fo/v1/acman/live/acs?acRefs=1122,3344?ids=1234,2345&limit=20&offset=0&sort=+acRef,-superCasId (URL to be encoded) 
           
         * For ECMG to retrieve
           QueryParameters:
           start={start}[&acRefs=<acRefs>][&state=<state>]
           e.g. GET /cp/om/fo/v1/acman/live/acs?acRefs=1122,3344?from=2015-01-15T16:00:00Z&to=2015-01-15T16:15:00Z (URL to be encoded)
           
         * For ACG to query
           QueryParameters:
           superCasIds={superCasIds}[&acRefs=<acRefs>][&from=<from>&to=<to>][&state=<state>]               
           e.g. GET /cp/om/fo/v1/acman/live/acs?supercasIds=235995136&acRefs=1122,3344?from=2015-01-15T16:00:00Z&to=2015-01-15T16:15:00Z&state=ALL (URL to be encoded)
           
    is: [ multiSuperCas, supportPaging, allowTimeRange, ids, acRefs, state, start ]
    responses:
      200:
        headers:
          X-total-count:
            type: integer
            example: 2
        body:
          schema: acs-response
          example: !include ../../schemas/examples/ACMan/acsResponse.json
      400:
      403:
      404: 
      500:
      503: 
      
  put:
    is : [ oneSuperCas, acRefs, start ]  
    description: |
      * Update
        * This updates the AC package corresponding to the specified criteria. 
    body:
      schema: acs-update
      example: !include ../../schemas/examples/ACMan/acsUpdate.json
    responses:
      204:
      400: 
      403:
      404: 
      500:
      503:    
         
  post:
    is : [ oneSuperCas ]
    description: |
      * Create/Update
        * This either creates a new AC package or changes a package that meets the specified criteria to be ACTIVE (state).
        * Key for identifying a unique AC package is {superCasId + acRefs + start}
        * Sets up the ACMan to respond with {ac,eocw} information for any acRef in the acRefs list.
      * On Create
        * responds with 201 and Location Header indicating the URL of the newly created AC package.
    body:
      schema: acs-request
      example: !include ../../schemas/examples/ACMan/acsRequest.json 
    responses:
      201:
        description: Update was done. {generateId} for the specific POST is generated by ACMan.
        headers:  
          Location: 
            type: string
            description: /cp/om/fo/v1/acman/live/acs/{generateId}  
      204:
        description: Update was done.
      400: 
      403: 
      404: 
      500: 
      503: 
  delete:
    is: [ oneSuperCas, acRefs, start, allowTimeRange ] 
    description: |
      * Delete
        * This turns the state of the AC packages corresponding to the specified criteria to INACTIVE. 
      * Options
         * For a ACG to cleanup all AC in a given time range
           QueryParameters:
           superCasId=<superCasId>[&from=<from>&to=<to>]
           ** TBD - multiSuperCas? **
           e.g. DELETE /cp/om/fo/v1/acman/live/acs?supercasIds=235995136&acRefs=1122,3344?from=2015-01-15T16:00:00Z&to=2015-01-15T16:15:00Z (URL to be encoded)

         * For a ACG to cleanup one specific AC Package.
           QueryParameters:
           superCasId=<superCasId>[&start=<start>][&acRefs=<acRefs>]
           e.g. DELETE /cp/om/fo/v1/acman/live/acs?supercasIds=235995136&start=2015-01-15T16:00:00Z&acRefs=1122,3344 (URL to be encoded)
    responses:
      200: 
      400: 
      403: 
      404: 
      500: 
      503: 
          
  /{id}:
    uriParameters:
      id :
        type: number
        repeat: false
    get:
      description: This returns the list of AC packages corresponding to the specified criteria. 
      responses:
        200:
          body:
            schema: acs-response
            example: !include ../../schemas/examples/ACMan/acsResponse.json
    put:
      description: |
        * This updates the AC package corresponding to the specified criteria. 
      body:
        schema: acs-update
        example: !include ../../schemas/examples/ACMan/acsUpdate.json
      responses:
        204:
        404: 
    delete:         
      description: |
        * This turns the state of the AC packages corresponding to the specified criteria to INACTIVE. 
      responses:
        200: 
        400: 
        403: 
        404: 
        500: 
        503:    