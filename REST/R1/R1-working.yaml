#%RAML 0.8
---
title: "R1"
version: v1
documentation: 
  - title: History
    content: |
       TBD
  - title: Approach
    content: |
       R1 - REST API for managing source and segment information with PKC.
       
      
        The following resources are managed via this interface API
          1. sources
          2. segments

 
  - title: PKC Scope
    content: |
       With PKC, the 2 CA systems under DBDS, namely PowerKEY (EC) and SCP/SCC (DTACS)
       have been merged into PKC.
       
       Also, PKC is deployed in the data center, and operates at a division level scope.  
       Multiple market level operations are managed from the PKC.  The data to specific
       market is identified by "caDomain" passed as queryParameter in the API.
 
  - title: PowerKEY CAS (ex EC)
    content: |
       The concepts of sources and segments are directly extracted from the legacy 
       deployments of DBDS.  The traditional parameters/attributes associated with these
       elements are continued to be supported.
           
           * Source: 
              *  <Parameters-TBD>
           * Segment:
              *  <Parameters-TBD>
 
  - title: SCP/SCC CAS (DTACS)
    content: |       
       To support SCP/SCC the following additional parameters/concepts are added.
       
           * Source: 
              *  isDTAApplicable - To determine if the Source is allowed for DTAs.
              *  SCC Mode - To determine the accesiblity level for the source.
              *  DLNA Mode - To determine if the source can be output on DLNA ports.
              *  SDHighValue - added to contentType of a source to qualify High Value content offered as SD. 
                
mediaType: application/json
resourceTypes: 
  - !include ../general/resourceTypes.yaml
traits: 
  - !include ../general/traits.yaml
  - !include ../R1/R1_traits.yaml
schemas:
  - sourceShortInfo : !include GeneratedSchemas/sourceShortInfo.json 
  - sourceShortInfos : !include GeneratedSchemas/sourceShortInfos.json
  - source : !include GeneratedSchemas/source.json
  - sources : !include GeneratedSchemas/sources.json
  - segmentShortInfo : !include GeneratedSchemas/segmentShortInfo.json 
  - segmentShortInfos : !include GeneratedSchemas/segmentShortInfos.json
  - segment : !include GeneratedSchemas/segment.json
  - segments : !include GeneratedSchemas/segments.json
  - errorType: !include ../../schemas/general/errorType.json    
baseUri: http://baseaddress/{version}
/sources:
  type: { autoReadOnlyCollection: {  errorResponse: errorType } }
  get:
    is: [ allowPagination, allowTracking,  multiCaDomain : { errorResponse: errorType }, qSegmentName: { objectType: source } ]
    responses:
      200: 
        body: 
          schema: !include GeneratedSchemas/sources.json
          example: !include ../../schemas/examples/pkc/sources.json 
      204: 
        body: 
          schema: !include GeneratedSchemas/sources.json
          example: !include ../../schemas/examples/pkc/sources.json 
      400:
        body: 
          schema: errorType
          example: !include ../../schemas/examples/general/error/APP_error/generic/SourceId_Invalid.json
      404:
        body: 
          schema: errorType
          example: !include ../../schemas/examples/general/error/APP_error/generic/CADomain_Not_Found.json
      500:
        body: 
          schema: errorType
          example: !include ../../schemas/examples/general/error/APP_error/generic/AppInternalError.json